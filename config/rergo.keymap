#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <190>; // leave at 190
};

// layers
#define BLYR 0
#define LLYR 1
#define RLYR 2
#define NLYR 3
#define QLYR 4
#define SLYR 5

// mouse movement
#define MMUP MOVE_VERT(-2200)
#define MMDN MOVE_VERT(2200)
#define MMLT MOVE_HOR(-2200)
#define MMRT MOVE_HOR(2200)

// scroll movement
#define SMUP SCROLL_VERT(25)
#define SMDN SCROLL_VERT(-25)

/ {
    combos {
        compatible = "zmk,combos";

        combo_left_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_left_bspc {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp BSPC>;
        };

        combo_left_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_left_del {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp DEL>;
        };

        combo_left_home_tab {
            // lowered the timeout because it was being triggered too often
            timeout-ms = <20>;
            key-positions = <12 13>;
            bindings = <&kp TAB>;
        };

    };

    // when layer LEFT and RIGHT are pressed go to NAV layer
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LLYR RLYR>;
            then-layer = <NLYR>;
        };
    };

    behaviors {
        tdl: tap_dance_layer {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MO_LAYERS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LLYR>, <&to QLYR>, <&to SLYR>;
        };
    };

    //    0    1    2    3    4     5    6    7    8    9
    //   10   11   12   13   14    15   16   17   18   19
    //   20   21   22   23   24    25   26   27   28   29
    //                  30   31    32   33

    keymap {
        compatible = "zmk,keymap";

    // q w f p b    j l u y ;
    // a r s t g    k n e i o
    // z x c d v    m h . . /

        default_layer {
            bindings = <
 &kp Q       &kp W      &kp F       &kp P      &kp B            &kp J    &kp L      &kp U       &kp Y      &kp SEMI
 &mt LSHFT A &mt LALT R &mt LCTRL S &mt LGUI T &kp G            &kp K    &mt LGUI N &mt LCTRL E &mt LALT I &mt LSHFT O
 &kp Z       &kp X      &kp C       &kp D      &kp V            &kp M    &kp H      &kp COMMA   &kp DOT    &kp FSLH
                                    &tdl       &kp SPACE        &kp RET  &mo RLYR
            >;
        };

    // 1 2 3 4 5    = < > y _
    // 6 7 8 9 0    ? ' | & -
    // ` x c d v    % + , " \

        left_layer {
            bindings = <
 &kp N1    &kp N2 &kp N3 &kp N4 &kp N5        &kp EQUAL &kp LT       &kp GT         &trans        &kp UNDER
 &kp N6    &kp N7 &kp N8 &kp N9 &kp N0        &kp QMARK &mt LGUI SQT &mt LCTRL PIPE &mt LALT AMPS &mt LSHFT MINUS
 &kp GRAVE &trans &trans &trans &trans        &kp PRCNT &kp PLUS     &trans         &kp DQT       &kp BSLH
                         &trans &trans        &kp DEL   &trans
            >;
        };


    // ! @ [ ] ^    = < > y _
    // ~ $ ( ) #    ? ' | & -
    // ` x { } *    % + , " \

//        left_layer {
//            bindings = <
// &kp EXCL  &kp AT   &kp LBKT &kp RBKT &kp CARET        &kp EQUAL &kp LT   &kp GT   &trans   &kp UNDER
// &kp TILDE &kp DLLR &kp LPAR &kp RPAR &kp HASH         &kp QMARK &kp SQT  &kp PIPE &kp AMPS &kp MINUS
// &kp GRAVE &trans   &kp LBRC &kp RBRC &kp STAR         &kp PRCNT &kp PLUS &trans   &kp DQT  &kp BSLH
//                             &trans   &trans           &kp DEL   &trans
//            >;
//        };

    // ! @ [ ] ^    PUP BLN NONE ELN ;
    // ~ $ ( ) #    PDN LT  DN   RT  UP
    // ` x { } *    m   h   ,    .   /

        right_layer {
            bindings = <
 &kp EXCL        &kp AT        &kp LBKT       &kp RBKT      &kp CARET        &kp PG_UP  &kp LC(A) &none    &kp LC(E) &trans
 &mt LSHFT TILDE &mt LALT DLLR &mt LCTRL LPAR &mt LGUI RPAR &kp HASH         &kp PG_DN  &kp LEFT  &kp DOWN &kp RIGHT &kp UP
 &kp GRAVE       &trans        &kp LBRC       &kp RBRC      &kp STAR         &trans     &trans    &trans   &trans    &trans
                                              &trans        &kp BSPC         &trans     &trans
            >;
        };


    // 1 2 3 4 5    PUP BLN NONE ELN ;
    // 6 7 8 9 0    PDN LT  DN   RT  UP
    // z x c d v    CSP h   ,    .   /

//        right_layer {
//            bindings = <
// &kp N1       &kp N2      &kp N3       &kp N4      &kp N5          &kp PG_UP  &kp LC(A) &none    &kp LC(E) &trans
// &mt LSHFT N6 &mt LALT N7 &mt LCTRL N8 &mt LGUI N9 &kp N0          &kp PG_DN  &kp LEFT  &kp DOWN &kp RIGHT &kp UP
// &trans       &trans      &trans       &trans      &trans          &trans     &trans    &trans   &trans    &trans
//                                       &trans      &kp BSPC        &trans     &trans
//            >;
//        };

    // q   SDN MUP SUP b    PP VDN VUP PRV NXT
    // LCK MLT MDN MRT g    k  LGI LCT LAT RCK
    // z   x   c   d   v    h  BDN BUP .   /

        navigation_layer {
            bindings = <
 &trans    &mwh SMDN &mmv MMUP &mwh SMUP &trans        &kp C_PP   &kp C_VOL_DN &kp C_VOL_UP &kp C_PREV &kp C_NEXT
 &mkp LCLK &mmv MMLT &mmv MMDN &mmv MMRT &trans        &trans     &kp LGUI     &kp LCTRL    &kp LALT   &mkp RCLK
 &trans    &trans    &trans    &trans    &trans        &trans     &kp C_BRI_DN &kp C_BRI_UP &trans     &trans
                               &trans    &trans        &kp C_MUTE &trans
            >;
        };

        qwerty_layer {
            bindings = <
 &kp Q &kp W &kp E &kp R    &kp T            &kp Y   &kp U &kp I     &kp O   &kp P
 &kp A &kp S &kp D &kp F    &kp G            &kp H   &kp J &kp K     &kp L   &kp SEMI
 &kp Z &kp X &kp C &kp V    &kp B            &kp N   &kp M &kp COMMA &kp DOT &kp FSLH
                   &to BLYR &kp SPACE        &kp RET &trans
            >;
        };

        system_layer {
            bindings = <
 &bootloader &trans &trans &trans &trans        &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &trans
 &trans      &trans &trans &trans &trans        &trans &trans &trans &trans &trans
 &trans      &trans &trans &trans &trans        &trans &trans &trans &trans &trans
                           &trans &trans        &trans &trans
            >;
        };
    };
};